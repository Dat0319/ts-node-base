image: node:16.15.1-alpine

stages:
  - test
  - release
  # - deploy

 before_script:
  - npm install

test:
  stage: test
  script:
    - npm run test:coverage

release-image:
  services:
    - docker:stable-dind
  stage: release
  before_script:
    - if [ "$CI_COMMIT_BRANCH" == "develop" ]; then ENV="production"; fi
    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then ENV="production"; fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - npm run build:$ENV
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest